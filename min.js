class ComputeShaderError extends Error{constructor(t){super(t),this.name="ComputeShaderError"}}class ComputeShaderUniform{constructor(t,e,i){this.locationName=t,this.type=e,this.data=i}update(t){uniform.data=t}}class ComputeShaderInput{constructor(t,e,i,r,h="RGBA"){if("length"===t)throw new ComputeShaderError("The input name 'length' is a reserved name.");let o=ComputeShader.gl.createTexture();ComputeShader.gl.bindTexture(ComputeShader.gl.TEXTURE_2D,o),ComputeShader.gl.texImage2D(ComputeShader.gl.TEXTURE_2D,0,ComputeShader.gl[h],i,r,0,ComputeShader.gl[h],ComputeShader.gl.FLOAT,e),ComputeShader.gl.texParameteri(ComputeShader.gl.TEXTURE_2D,ComputeShader.gl.TEXTURE_MIN_FILTER,ComputeShader.gl.NEAREST),ComputeShader.gl.texParameteri(ComputeShader.gl.TEXTURE_2D,ComputeShader.gl.TEXTURE_MAG_FILTER,ComputeShader.gl.NEAREST),ComputeShader.gl.texParameteri(ComputeShader.gl.TEXTURE_2D,ComputeShader.gl.TEXTURE_WRAP_S,ComputeShader.gl.CLAMP_TO_EDGE),ComputeShader.gl.texParameteri(ComputeShader.gl.TEXTURE_2D,ComputeShader.gl.TEXTURE_WRAP_T,ComputeShader.gl.CLAMP_TO_EDGE),this.id=null,this.texture=o,this.type=h,this.locationName=t,this.location=null,this.dimensionsLocation=null,this.width=i,this.height=r,this.frameBuffer=ComputeShader.gl.createFramebuffer(),ComputeShader.gl.bindFramebuffer(ComputeShader.gl.FRAMEBUFFER,this.frameBuffer),ComputeShader.gl.framebufferTexture2D(ComputeShader.gl.FRAMEBUFFER,ComputeShader.gl.COLOR_ATTACHMENT0,ComputeShader.gl.TEXTURE_2D,this.texture,0),ComputeShader.gl.viewport(0,0,i,r)}update(t){ComputeShader.gl.bindTexture(ComputeShader.gl.TEXTURE_2D,this.texture),ComputeShader.gl.texImage2D(ComputeShader.gl.TEXTURE_2D,0,ComputeShader.gl[this.type],this.width,this.height,0,ComputeShader.gl[input.type],ComputeShader.gl.FLOAT,t)}read(t=new Float32Array(this.width*this.height*4)){return ComputeShader.gl.bindFramebuffer(ComputeShader.gl.FRAMEBUFFER,this.frameBuffer),ComputeShader.gl.readPixels(0,0,this.width,this.height,ComputeShader.gl.RGBA,ComputeShader.gl.FLOAT,t),t}}class ComputeShaderOutput{constructor(t,e,i){this.frameBuffer=ComputeShader.gl.createFramebuffer(),this.texture=ComputeShader.gl.createTexture(),this.width=t,this.height=e,this.type="RGBA"}read(t=new Float32Array(this.width*this.height*4)){return ComputeShader.gl.bindFramebuffer(ComputeShader.gl.FRAMEBUFFER,this.frameBuffer),ComputeShader.gl.readPixels(0,0,this.width,this.height,ComputeShader.gl.RGBA,ComputeShader.gl.FLOAT,t),t}}class ComputeShaderContext{constructor(t){this.canvas=document.createElement("canvas"),this.context=this.canvas.getContext("webgl",t?{powerPreference:"high-performance"}:{})}resize(t,e){this.canvas.width=t,this.canvas.height=e}}class ComputeShader{constructor(t,e,i){if(!ComputeShader.gl)throw new ComputeShaderError("Attempted to create a compute shader without a WebGL context");if(0>=+e)throw new ComputeShaderError("Attempted to create a compute shader without a width");if(0>=+i)throw new ComputeShaderError("Attempted to create a compute shader without a height");this.gl=ComputeShader.gl,this.width=e,this.height=i,this.vertexShader=ComputeShader.createShader(this.gl,this.gl.VERTEX_SHADER,ComputeShader.vertexShader),this.fragmentShader=ComputeShader.createShader(this.gl,this.gl.FRAGMENT_SHADER,t),this.program=ComputeShader.createProgram(this.gl,this.vertexShader,this.fragmentShader),this.aPos=this.gl.getAttribLocation(this.program,"aPos"),this.posBuffer=this.gl.createBuffer(),this.gl.bindBuffer(this.gl.ARRAY_BUFFER,this.posBuffer),this.gl.bufferData(this.gl.ARRAY_BUFFER,ComputeShader.positions,this.gl.STATIC_DRAW),this.gl.vertexAttribPointer(this.aPos,2,this.gl.FLOAT,!1,0,0),this.gl.enableVertexAttribArray(this.aPos),this.textureId=0,this.ids=[],this.inputs={length:0},this.inputInfo={length:0},this.uniforms={},this.uniformsInfo={},this.attributes=[],this.output=new ComputeShaderOutput(this.width,this.height,"RGBA"),this.gl.bindTexture(this.gl.TEXTURE_2D,this.output.texture),this.gl.texImage2D(this.gl.TEXTURE_2D,0,this.gl.RGBA,this.width,this.height,0,this.gl.RGBA,this.gl.FLOAT,new Float32Array(this.width*this.height*4)),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MIN_FILTER,this.gl.NEAREST),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_MAG_FILTER,this.gl.NEAREST),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_S,this.gl.CLAMP_TO_EDGE),this.gl.texParameteri(this.gl.TEXTURE_2D,this.gl.TEXTURE_WRAP_T,this.gl.CLAMP_TO_EDGE)}use(t=!1){this.gl.useProgram(this.program),t?this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,null):(this.gl.bindFramebuffer(this.gl.FRAMEBUFFER,this.output.frameBuffer),this.gl.framebufferTexture2D(this.gl.FRAMEBUFFER,this.gl.COLOR_ATTACHMENT0,this.gl.TEXTURE_2D,this.output.texture,0)),this.gl.viewport(0,0,this.width,this.height)}run(){if(this.inputs.length>this.gl.getParameter(this.gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS))throw new ComputeShaderError("WebGL cannot support the current number of inputs.");for(let t in this.inputs){let e=this.inputs[t];e&&"length"!==t&&(this.gl.activeTexture(this.gl.TEXTURE0+this.inputInfo[e.locationName].id),this.gl.bindTexture(this.gl.TEXTURE_2D,e.texture))}this.gl.drawArrays(this.gl.TRIANGLES,0,3)}read(t=new Float32Array(this.width*this.height*4)){return this.gl.readPixels(0,0,this.width,this.height,this.gl.RGBA,this.gl.FLOAT,t),t}addInput(t){if(this.inputs[t.locationName])throw new ComputeShaderError(`The input name '${t.locationName}' is already taken.`);if(this.inputs[t.locationName]?.shader)throw new ComputeShaderError(`The input '${t.locationName}' is being used by another shader.`);let e={};this.inputInfo[t.locationName]=e,e.id=this.ids.length?this.ids.pop():this.textureId++,e.location=this.gl.getUniformLocation(this.program,t.locationName),e.dimensionsLocation=this.gl.getUniformLocation(this.program,t.locationName+"Dim"),this.inputs[t.locationName]=t,this.inputs.length++}removeInput(t){this.inputs[t.locationName]||console.warn(`The input '${t.locationName}' does not exist.`),this.ids.push(t.id),t.shader=this.inputInfo[t.locationName].id=this.inputInfo[t.locationName].location=this.inputInfo[t.locationName].dimensionsLocation=null,this.inputs[t.locationName]=null,this.inputs.length--}initializeInputs(){for(let t in this.inputs){if(!this.inputs[t]||"length"===t)continue;let e=this.inputs[t];this.gl.uniform1i(this.inputInfo[e.locationName].location,this.inputInfo[e.locationName].id),this.gl.uniform2fv(this.inputInfo[e.locationName].dimensionsLocation,[this.inputs[t].width,this.inputs[t].height])}}clearInputs(){for(let t in this.inputs)this.inputs[t]&&"length"!==t&&this.removeInput(this.inputs[t]);this.inputs={length:0},this.textureId=0,this.ids.length=0}addUniform(t){this.uniforms[t.locationName]=t,this.uniformsInfo[t.locationName]=this.gl.getUniformLocation(this.program,t.locationName)}initializeUniforms(){for(let t in this.uniforms)this.gl["uniform"+this.uniforms[t].type](this.uniformsInfo[t],this.uniforms[t].data)}clearUniforms(){this.uniforms.length=0}testInformation(t){if(!this.gl)throw new ComputeShaderError(`Attempted to ${t} without a WebGL context`);if(!this.program)throw new ComputeShaderError(`Attempted to ${t} without a program`)}static vertexShader=`attribute vec2 aPos;void main() {gl_Position = vec4(aPos, 0, 1);}`;static positions=new Float32Array([-1,-1,3,-1,-1,3,]);static createShader(t,e,i){let r=t.createShader(e);if(t.shaderSource(r,i),t.compileShader(r),!t.getShaderParameter(r,t.COMPILE_STATUS))throw new ComputeShaderError("An error occured in a shader: "+t.getShaderInfoLog(r));return r}static createProgram(t,e,i){let r=t.createProgram();if(t.attachShader(r,e),t.attachShader(r,i),t.linkProgram(r),!t.getProgramParameter(r,t.LINK_STATUS))throw new ComputeShaderError("An error occured in a program: "+t.getProgramInfoLog(r));return r}static clear(){ComputeShader.gl.clearColor(0,0,0,1),ComputeShader.gl.clear(ComputeShader.gl.COLOR_BUFFER_BIT)}static swap(t,e){if(!t||!e)throw new ComputeShaderError("swap requires two inputs.");let i=e.texture,r=e.frameBuffer;e.texture=t.texture,e.frameBuffer=t.frameBuffer,t.texture=i,t.frameBuffer=r}static useContext=t=>{if(!t.context.getExtension("OES_texture_float"))throw new ComputeShaderError("Cannot get extention 'OES_texture_float'");if(!t.context.getExtension("OES_texture_float_linear"))throw new ComputeShaderError("Cannot get extention 'OES_texture_float_linear'");if(!t.context.getExtension("WEBGL_color_buffer_float"))throw new ComputeShaderError("Cannot get extention 'WEBGL_color_buffer_float'. Most smartphones do not support this, try switching to another device?");ComputeShader.gl=t.context};static gl=null}
